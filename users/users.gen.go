// Package Users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Users

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

// Error model
type Error struct {
	Error     string  `json:"error"`
	Message   string  `json:"message"`
	StatuCode float32 `json:"statuCode"`
}

// User Model
type User struct {
	// The date that the user was created.
	CreateDate  *openapi_types.Date `json:"createDate,omitempty"`
	DateOfBirth openapi_types.Date  `json:"dateOfBirth"`
	Email       openapi_types.Email `json:"email"`

	// Set to true if the user's email has been verified.
	EmailVerified *bool  `json:"emailVerified,omitempty"`
	FirstName     string `json:"firstName"`

	// Unique identifier for the given user.
	Id       int32  `json:"id"`
	LastName string `json:"lastName"`
}

// UserId defines model for userId.
type UserId string

// User Model
type N200GetUser User

// User Model
type N200PatchUser User

// User Model
type N201CreateUser User

// Error model
type N400 Error

// Error model
type N401 Error

// Error model
type N500 Error

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody struct {
	DateOfBirth openapi_types.Date  `json:"dateOfBirth"`
	Email       openapi_types.Email `json:"email"`
	FirstName   string              `json:"firstName"`
	LastName    string              `json:"lastName"`
}

// PatchUsersUserIdJSONBody defines parameters for PatchUsersUserId.
type PatchUsersUserIdJSONBody struct {
	DateOfBirth *string `json:"dateOfBirth,omitempty"`

	// If a new email is given, the user's email verified property will be set to false.
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
}

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// PatchUsersUserIdJSONRequestBody defines body for PatchUsersUserId for application/json ContentType.
type PatchUsersUserIdJSONRequestBody PatchUsersUserIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create New User
	// (POST /users)
	PostUser(c *gin.Context)
	// Get User Info by User ID
	// (GET /users/{userId})
	GetUsersUserId(c *gin.Context, userId UserId)
	// Update User Information
	// (PATCH /users/{userId})
	PatchUsersUserId(c *gin.Context, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostUser(c)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter userId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUsersUserId(c, userId)
}

// PatchUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter userId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchUsersUserId(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/users", wrapper.PostUser)

	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUsersUserId)

	router.PATCH(options.BaseURL+"/users/:userId", wrapper.PatchUsersUserId)

	return router
}
